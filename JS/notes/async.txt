Asynchronous Javascript(AJAX):
   using AJAX, we can load specific parts of website
   using AJAX, we can hold certain tasks to run later

Javascript is synchronous(line by line) , single threaded(one task at a time) programming language
But in Js, async is also possible
 --Timers:
 Timers are web API provided by browser
  setTimeout(fn,time in ms) --- fn will executed after given time
  setInterval(fn,time in ms) -- fn will get executed every time after specific is over
  we can cancel timeOut and interval by clearTimeout and clearInterval functions
  All async functions will be pushed to task Queue and will be pushed to callstack one by one after callstack is empty
  Event loop informs task queue that whether callstack is empty or not
 --fetch
 API(Application programming Interface):
  -- callback hell:
  function passed as a parameter to another function is callback function
  callback inside callback with multiple nested callbacks is called callback hell. Dealing with callbacks in complex situations will make worse. so we are using Promises
Promise: Promise is an object used to handle asynchronous operations. it stores the state of eventual completion of asynchronous operation. so that we can write logics according to promise object state
we can use error handling like
  promise 
           .then(function(res){ //statements })
           .catch(function(res){//statements })
           .finally(function(res){//statements })
"then" will work only when promise is resolved and it receives response of resolve
"catch" will work only when promise is rejected and it receives the error of reject
" finally " will work in both the cases

Promise Chaining:
        One Promise can return values to another promise which is linked such that linking of promises is known as "promise chaining"
myPromise
	.then(function (val) //10
    {
		console.log(val);
		return val * 2; //20
	})
	.then(function (val)//20
	{
		console.log(val);
		return val * 2;//40
	})
	.then(function (val)//40
	{
		console.log(val)
	})

In Realtime, frontend links to backend using API's:
API: Application Programming Interface
We can achieve this by multiple ways
   i. xhr(xmlHttpRequest): Browser have default object xmlHttpRequest, using it we can access any http requests
   ii. fetch(). fetch is a web API which is used to perform 
    GET,PUT,POST,DELETE,PATCH requests to http links
     and return promises

Basic Syntax of fetch

fetch(url, options)
    .then(response => {
        // Handle response
    })
    .catch(error => {
        // Handle error
    });
url: The URL to send the request to.
options: An optional object to configure the request (e.g., HTTP method, headers, body).
1. Performing a Basic GET Request
A simple GET request to fetch data from a URL:

fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json()) // Parse JSON response
    .then(data => {
        console.log(data); // Logs array of posts
    })
    .catch(error => {
        console.error('Error fetching data:', error);
    });
2. Making a POST Request
To send data to the server, use the POST method and include a body in the options object:

fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        title: 'foo',
        body: 'bar',
        userId: 1
    })
})
    .then(response => response.json())
    .then(data => {
        console.log('Post created:', data);
    })
    .catch(error => {
        console.error('Error creating post:', error);
    });


3. Async-Await:
Async Await is used to make promises code more synchronous and modern. it is easy to read.

Await is a keyword to make code wait until a promise is resolved
we cannot make code wait directly so await keyword must be used inside 'async' functions.
eg: 
promise code:
     fetch('url')
      .then(function(res){ return res.json()})
      .then(function(data){ console.log(data)})
      .catch(function(err){console.log(err)})
The above code can be changed as:
const res= await fetch('url')
const data= await res.json()
For error handling, we can use try catch blocks


















  


